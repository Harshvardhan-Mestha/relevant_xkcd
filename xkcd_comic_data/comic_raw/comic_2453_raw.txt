We still need to complete some explanations like this one: 1608: Hoverboard. All incomplete explanations are here.
Never use the Math markup language at the transcript. The reason for this you can read at the Editor FAQ.
2453: Excel Lambda
Explain xkcd: It's 'cause you're dumb.
(Redirected from 2453)
|<< PrevComic #2453 (April 21, 2021)Next >>|
Excel Lambda

Title text: Extremely rude how Turing's later formulations of the halting problem called me out by name specifically.
Explanation[edit]
Cueball is computing and Ponytail criticizes him in a way that is reminiscent of the Code Quality series, although not as harsh. Cueball has lots of strange computer problems, and this will most likely result in another one.
The comic begins with Ponytail finding out that Microsoft Excel is adding a lambda function to their function library. This was announced by Microsoft for Beta users in December of 2020. A lambda function is a fundamental mathematical structure that can be used to define all possible computations, in what is known as lambda calculus. They are commonly found in programming languages such as Lisp, Python, and many others. A lambda function is also called an anonymous function because in most languages it can be passed to other functions (including another lambda function) without needing to be given any formal name.
Finding that Excel is adding a lambda function pleases Ponytail. Cueball claims that the lambda function is unnecessary, as when he needs arbitrary computation he just adds a block of columns to the side of his sheet and has a Turing machine process it. This would technically work as lambda calculus is formally equivalent to Turing machines. People have created Turing machines in Excel, although not for practical purposes.
Ponytail finds his solution absurd and is convinced Cueball is "doing computing wrong". But he claims that all computing is equally wrong, citing the Church-Turing thesis, a hypothesis which says that a function can be computed by executing a series of instructions if and only if that function is computable by a Turing machine. A classical Turing machine uses an infinitely long strip of tape as its memory; for Cueball, the large Excel column acts as the "tape". All ways of computing are "equally wrong" since, according to this thesis, they can all be translated to or from a Turing machine.
Ponytail and Cueball appear to have different ideas of 'computing'. Ponytail, like most programmers, probably includes efficiency and readability as important characteristics of 'doing computing right'. Cueball appears interested only in computability, a more theoretical point of view than Ponytail's.
Ponytail then says that Turing would change his mind if he saw Cueball's spreadsheet, presumably because of the extreme complexity of Cueball's code in the spreadsheet. Cueball's final statement is that Turing could ask him to stop, but would not be able to prove if he actually will stop.
Cueball's final statement is a reference to the halting problem mentioned in the title text. It is the problem of determining whether a given Turing machine will halt. The problem has been shown to be undecidable, i.e., it is impossible to build an algorithm that computes whether any arbitrary Turing machine will halt or not. Because of the way Cueball has behaved, he has been specifically mentioned in Turing's later formulations of the halting problem. Cueball finds this very rude. This is of course a joke, since Turing has been dead since 1954, presumably long before Cueball was born. But it would be crazy indeed if a scientist became so mad at a person that they would mention this person by name in their formulation of a serious problem.
Over-complicated spreadsheets were also mentioned in 2180: Spreadsheets.
Transcript[edit]
[In a narrow panel, Ponytail is walking in from the left, looking down at her phone]
Ponytail: Oh cool, Excel is adding a lambda function, so you can recursively define functions.
[Ponytail, holding her phone to her side stands behind Cueball, who is sitting in an office chair with a hand on a laptop standing on his desk. He has turned around to face her, leaning with the other arm on the back of the chair.]
Cueball: Seems unnecessary.
Cueball: When I need to do arbitrary computation, I just add a giant block of columns to the side of my sheet and have a Turing machine traverse down it.
[In a frame-less panel Ponytail is standing in he same position behind Cueball, who has resumed working on his laptop with both hands on the keyboard.]
Ponytail: I think you're doing computing wrong.
Cueball: The Church-Turing thesis says that all ways of computing are equally wrong.
[Ponytail is still behind Cueball, who has a finger raised in the air, and the other hand is on the desk. Cueball's head has a visible sketch layer which has not been erased.]
Ponytail: I think if Turing saw your spreadsheets, he'd change his mind.
Cueball: He can ask me to stop making them, but not prove whether I will!
Trivia[edit]
In the original version of the comic, in the final panel, there was a gray pencil outline, slightly different to Cueball's head that had not been removed.
This was later fixed in a re-upload.

 add a comment! ⋅  add a topic (use sparingly)! ⋅  refresh comments!
Discussion
Another ghost cueball comic! You can see it in the last panel. 108.162.216.54 06:03, 22 April 2021 (UTC)
Is that something that has happened before? First time noticing it. Is it just a remnant of the sketching? Of doest it mean something? 162.158.93.213 13:21, 22 April 2021 (UTC)
It has happened, and is now mentioned in the trivia section. --Kynde (talk) 16:43, 23 April 2021 (UTC)
Randall seems to have update the comic to remove the ghost head. Someone should update it here too. (I don't know how). DrPumpkinz (talk) 00:07, 23 April 2021 (UTC)
Someone needs to add an explanation of the Lambda, and possibly how Excel is implementing it. (I suppose it would immediately be useful for cutting down common re-use within a formula line, though =IF(ISERR(FIND(":",A1)),A1,RIGHT(A1,LEN(A1)-FIND(":",A1))) is a trivial repeat of the FIND, once to check, then again to do, I often need to do far more nested things, check for being a value, repeat the FIND to deal with the LEFT, etc.) But it has the smell of being effectively a Macro in this instance. Which already seems to me to be the only way to run a proper Turing Machine in an Excel column without hitting Circular Reference issues.

Would it be a stretch to say that Turing's inability to prove if Cueball will stop is actually equivalent to the halting problem, except it is for Cueball and not an arbitrary Turing machine? I thought that was pretty funny. xTheBHox (talk) 11:30, 22 April 2021 (UTC)

Microsoft themselves claim that the addition of LAMBDA makes Excel turing-comlpete (see here: https://techcommunity.microsoft.com/t5/excel-blog/announcing-lambda-turn-excel-formulas-into-custom-functions/ba-p/1925546). Based on this comic, I would argue that it already was... 162.158.159.36 12:55, 22 April 2021 (UTC)
Someone has already made Conway's game of life in excel (http://dailydoseofexcel.com/archives/2011/04/06/conways-game-of-life-simulation-in-excel) and game of life has been shown to be Turing complete. Kvarts314 (talk) 13:28, 22 April 2021 (UTC)
Since Excel has a way to store and do math on numbers, and also a way to 'point' to a certain cell, it is Turing-complete. A lambda function is not necessary for Turing-completeness (e.x. a turing machine does not have one.) 162.158.255.250 15:14, 22 April 2021 (UTC)
it should probably be mentioned that the number of excel rows is emphatically *not* infinite, so only simple turing machines could be implemented this way. 162.158.93.15 17:20, 22 April 2021 (UTC)
In fact, it technically isn't Turing complete, as it has only a finite amount of data. It might be a finite-state-machine or the like, though. --108.162.219.218 20:22, 22 April 2021 (UTC)
Turing completeness is a qualilty of a model of computing, not a particular physical implementation. There's no inherent limit to the size of a spreadsheet, so it's as Turing-complete as any programming language. Any actual implementation of a Turing Machine only has a finite tape, not an infinite tape like the theoretical model. Barmar (talk) 15:39, 23 April 2021 (UTC)
It may be worth citing this work. https://gotocon.com/amsterdam-2016/presentation/Pure%20Functional%20Programming%20in%20Excel Noehp (talk) 00:02, 23 April 2021 (UTC)
Zerothly, why is almost everyone here using weird 'indents', or maybe new-contributor-starts-here methods, in this article's Talk comments? Is this some lambdaesque in-joke being carried in here from some script/code dialect I'm not aware of? Primarily, though, I just wanted to say that the (external) explanations of how Lambda works in Python look a lot to me like a nuanced Eval-like process, rather than a typical Anonymous Function that becomes sequestered away as a code-chunk at the end of a loose-pointer, internally. Python's one of the languages I've not yet bothered to learn to write (just sufficiently understand to get the gist and flow), so maybe I'm reading the Lies-To-Children explanations for n00bs. Should we get some other languages represented here, either within the C-family or off into the clans of code that might have an even more interesting implementation? Nothing too esoteric, but a distinct grammar difference would be an interesting comparison.162.158.159.104 11:22, 23 April 2021 (UTC)
Fixed the indents. PoolloverNathan[stalk the blue seas]
U•T•S•c
14:01, 21 May 2021 (UTC)
Now if only someone would find examples of creative loop variable abuse (I guess that'd be optimal solutions in lots of Code Golf or Code Olympics problems) that demonstrate the imperative style of code to its full glory. The corresponding solution in λ code is probably rife with applicative functors and monads i.e. ugly and awkward to anyone not familiar with these concepts. The Python example here merely looks like anonymous function sprinkled into an imperative style so not very helpful. 172.70.98.89 04:15, 18 October 2021 (UTC)
I removed a lot of interesting but irrelevant material about the details of lambda functions and how they're implemented in Python, with apologies to everyone who spent time crafting it, since this comic is about Excel. If anyone has time to explain how lambda functions are implemented in Excel formulas specifically, please feel free to add. Jkshapiro (talk) 15:04, 10 April 2022 (UTC)
Also I wasn't sure about the phrase "fundamental mathematical structure", so left it in. Usually when people talk about mathematical structures they're referring to things like rings and fields, and I don't know what a fundamental mathematical structure even is, but that could well be my own ignorance showing. Jkshapiro (talk) 15:04, 10 April 2022 (UTC)
Categories: All comicsComics from 2021Comics from AprilWednesday comicsComics featuring CueballComics featuring PonytailComics featuring real peopleComputersSpreadsheetsProgramming